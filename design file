module smart_traffic(
input clk,
output reg [2:0] light,
output reg clk_out,
output reg [3:0] an,
output reg [6:0] seg
);
reg [24:0] count=0;
always@(posedge clk)
begin
     if(count == 25000000-1)
     begin
          clk_out<=~clk_out;
          count<=0;
     end
     else
           count<=count+1;
end
reg [1:0] state=0;
reg [5:0] count1=0;
always@( posedge clk_out)
begin
     case(state)
     2'b00:
          if(count1==20)
            begin
              state<=2'b01;
              count1<=0;
            end
          else
            begin
              count1<=count1+1;
            end
     2'b01:
          if(count1==5)
            begin
              state<=2'b10;
              count1<=0;
            end
           else
             begin
              count1<=count1+1;
            end
     2'b10:
          if(count1==30)
            begin
              state<=2'b00;
              count1<=0;
            end
          else
             begin
              count1<=count1+1;
            end
     endcase
end

always@(*)
begin
      case(state)
      2'b00:
            light=3'b001;//green
      2'b01:
            light=3'b010;//yellow
      2'b10:
            light=3'b100;//red
      endcase
end
    reg [15:0] refresh_counter = 0;
    reg digit=0 ;
    reg [3:0] current_digit=0;
    wire [3:0] count_tens = count1 / 10;
    wire [3:0] count_ones = count1 % 10;

    always @(posedge clk) begin
        refresh_counter <= refresh_counter + 1;
        if (refresh_counter == 50_000) begin
            digit <= digit + 1;
            refresh_counter <= 0;
        end
    end

  always @(*) begin
    case (digit)
        2'd0: begin an = 4'b1000; current_digit = count_ones; end  // Right
        2'd1: begin an = 4'b0100; current_digit = count_tens; end  //1234
    endcase
end


    // 7 segment
always @(*) begin
    case (current_digit)
        4'd0: seg = 7'b0000001;  // '0'
        4'd1: seg = 7'b1001111;  // '1'
        4'd2: seg = 7'b0010010;  // '2'
        4'd3: seg = 7'b0000110;  // '3'
        4'd4: seg = 7'b1001100;  // '4'
        4'd5: seg = 7'b0100100;  // '5'
        4'd6: seg = 7'b0100000;  // '6'
        4'd7: seg = 7'b0001111;  // '7'
        4'd8: seg = 7'b0000000;  // '8'
        4'd9: seg = 7'b0000100;  // '9'
      default:seg = 7'b1111111;  // off
    endcase
end

endmodule
      


